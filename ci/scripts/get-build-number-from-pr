#!/usr/bin/env ruby
require 'net/http'
require 'json'
require 'uri'

def get_commit_sha
  master_commit_sha = `git rev-parse HEAD 2>&1`

  if $?.exitstatus > 0
    puts "Could not find master branch's commit sha."
    exit 1
  else
    return master_commit_sha.strip!
  end
end

def find_PR_by_merge_commit_sha(merge_commit_sha)
  previous_prs = get_recently_closed_pull_requests(5)
  previous_prs.each do |pr|
    if pr["merge_commit_sha"] == merge_commit_sha.to_s
      return pr
    end
  end
  puts "No Pull Request found with merge_commit_sha \"#{merge_commit_sha}\""
  exit 1
end

def get_pr_combined_statuses(pr)
  combine_status_url = pr["statuses_url"].sub('statuses','commits')+'/statuses'
  uri = URI.parse(combine_status_url)
  req = Net::HTTP::Get.new(uri, {'Authorization' => "token #{ENV['GITHUB_TOKEN']}"})
  res = Net::HTTP.start(uri.hostname, uri.port, :use_ssl => uri.scheme == 'https') do |http|
    http.request(req)
  end
  json = JSON.parse(res.read_body)
  if res.code.to_i != 200 || json.length < 1
    puts "No statuses found for this Pull Request"
    puts combine_status_url
    puts "returned"
    puts res.read_body
    exit 1
  else
    json
  end
end

def get_artifact_id_from_status(pr_status)
  pr_status.each do |status|
    if status["context"] == 'artifactPublish'
      return status["target_url"].split("/").last
    end
  end
end

def get_recently_closed_pull_requests(count=5)
  url = "#{ENV['GITHUB_API_URL']}repos/#{ENV['GITHUB_ORG']}/#{ENV['GITHUB_REPO']}/pulls?state=closed&per_page=#{count}"
  uri = URI.parse(url)
  req = Net::HTTP::Get.new(uri, {'Authorization' => "token #{ENV['GITHUB_TOKEN']}"})
  res = Net::HTTP.start(uri.hostname, uri.port, :use_ssl => uri.scheme == 'https') do |http|
    http.request(req)
  end
  json = JSON.parse(res.read_body)
  if res.code.to_i != 200
    puts "Could not find last 5 pull requests"
    puts url
    puts "returned"
    puts res.read_body
    exit 1
  else
    json
  end
end

$commit_sha = get_commit_sha
puts "Master Branch Commit: #{$commit_sha}"

$pr = find_PR_by_merge_commit_sha($commit_sha)
puts "Pull Request \#"+ $pr["number"].to_s

$build_number = get_artifact_id_from_status(get_pr_combined_statuses($pr))
puts "Build number: #{$build_number}"

Dir.mkdir("../build-number") unless File.exists?("../build-number")

open('../build-number/build-number', 'w') do |f|
  f.puts $build_number
end
