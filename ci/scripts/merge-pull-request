#!/usr/bin/env ruby

require 'English'
require 'json'
require 'uri'
require 'net/http'
require 'openssl'
require 'set'

accessToken = ENV['GITHUB_TOKEN']
pullNumberFile = ENV['PULL_REQUEST_NUMBER_FILE']
pullNumber = File.open("../#{pullNumberFile}", 'rb') { |file| file.read }.to_i
ownerRepo = ENV['OWNER_REPO']
current_branch_name = ENV['CURRENT_BRANCH']

baseURL = "https://github.homedepot.com/api/v3/repos/#{ownerRepo}"

mergePullRequestURI = URI("#{baseURL}/pulls/#{pullNumber}/merge")

http = Net::HTTP.new(mergePullRequestURI.host, mergePullRequestURI.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

mergePullRequest = Net::HTTP::Put.new(mergePullRequestURI)
mergePullRequest["Authorization"] = "token #{accessToken}"
mergePullRequest["Content-Type"] = "application/json"

code_src_sha = %x(git rev-parse HEAD).strip!

mergePullRequest.body = {sha: code_src_sha, merge_method: 'squash'}.to_json
mergePullRequestResponse = http.request(mergePullRequest)
responseCode = mergePullRequestResponse.code.to_i
mergePullRequestJSON = JSON.parse(mergePullRequestResponse.read_body)
puts mergePullRequestJSON["message"]
if responseCode != 200
  exit(1)
end

deleteBranchRequestURL = "#{baseURL}/git/refs/heads/#{current_branch_name}"
deleteBranchRequestURI = URI(deleteBranchRequestURL)
deleteBranchRequest = Net::HTTP::Delete.new(deleteBranchRequestURI)
deleteBranchRequest["Authorization"] = "token #{accessToken}"

deleteBranchResponse = http.request(deleteBranchRequest)
responseCode = deleteBranchResponse.code.to_i
responseBody = deleteBranchResponse.read_body
if responseCode != 204
  puts "Failed to delete branch"
  puts "Branch API URL: #{deleteBranchRequestURL}"
  puts "Data Return:"
  puts "HTTP Code: #{responseCode}"
  puts "#{responseBody}"
  exit(1)
else
  puts "Branch \"#{current_branch_name}\" successfully deleted"
end
